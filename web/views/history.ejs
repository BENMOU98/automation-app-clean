<%- include('partials/header', {page: 'history'}) %>

<div class="container mt-4">
  <div class="card">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0"><i class="bi bi-clock-history"></i> Publication History</h5>
    </div>
    
    <div class="card-body">
      <% if (error) { %>
        <div class="alert alert-danger" role="alert">
          <i class="bi bi-exclamation-triangle-fill"></i> <%= error %>
        </div>
      <% } else if (publications.length === 0) { %>
        <div class="alert alert-info" role="alert">
          <i class="bi bi-info-circle-fill"></i> No published articles found. Generate and publish some content to see it here.
        </div>
      <% } else { %>
        <h3 class="mb-4">Published Articles</h3>
        
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead class="table-light">
              <tr>
                <th scope="col" width="5%">#</th>
                <th scope="col" width="25%">Keyword</th>
                <th scope="col" width="20%">Publication Date</th>
                <th scope="col" width="50%">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% publications.forEach((article, index) => { %>
                <tr>
                  <td><%= index + 1 %></td>
                  <td><%= article['Keyword'] || article[config.app.keywordColumn] %></td>
                  <td><%= article['Publication Date'] || 'Unknown' %></td>
                  <td>
                    <div class="btn-group" role="group">
                      <a href="<%= article['Post URL'] %>" target="_blank" class="btn btn-primary btn-sm">
                        <i class="bi bi-eye"></i> View Post
                      </a>
                      <button class="btn btn-info btn-sm preview-btn" data-keyword="<%= article['Keyword'] || article[config.app.keywordColumn] %>">
                        <i class="bi bi-search"></i> Preview
                      </button>
                      <button class="btn btn-danger btn-sm delete-btn" data-keyword="<%= article['Keyword'] || article[config.app.keywordColumn] %>">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        
        <div class="alert alert-info mt-4" role="alert">
          <i class="bi bi-info-circle"></i> This page shows all articles that have been successfully published to your WordPress site.
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Article Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalLabel">Article Preview</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-4" id="preview-spinner">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading article content...</p>
        </div>
        <div id="preview-container" style="display: none;">
          <h1 id="preview-title" class="mb-4"></h1>
          <div id="preview-content" class="article-preview"></div>
        </div>
        <div id="preview-error" class="alert alert-danger" style="display: none;">
          <i class="bi bi-exclamation-triangle-fill"></i> 
          <span id="error-message">Error loading article content.</span>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete the article for keyword <strong id="delete-keyword"></strong>?</p>
        <p class="text-danger"><i class="bi bi-exclamation-triangle-fill"></i> This will remove the article from your history but will NOT delete it from WordPress.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirm-delete-btn">Delete</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Article preview styles */
.article-preview {
  font-family: Georgia, serif;
  line-height: 1.6;
  color: #333;
}

.article-preview h1 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  color: #222;
  border-bottom: 1px solid #eee;
  padding-bottom: 0.5rem;
}

.article-preview h2 {
  font-size: 1.8rem;
  font-weight: 600;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: #333;
}

.article-preview h3 {
  font-size: 1.4rem;
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 1rem;
  color: #444;
}

.article-preview p {
  margin-bottom: 1.2rem;
  font-size: 1.1rem;
}

.article-preview ul, 
.article-preview ol {
  margin-bottom: 1.2rem;
  padding-left: 2rem;
}

.article-preview li {
  margin-bottom: 0.5rem;
}

.article-preview blockquote {
  border-left: 4px solid #ddd;
  padding-left: 1rem;
  font-style: italic;
  margin-left: 0;
  color: #555;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize modals
    const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    
    // Preview buttons
    const previewButtons = document.querySelectorAll('.preview-btn');
    previewButtons.forEach(button => {
      button.addEventListener('click', function() {
        const keyword = this.getAttribute('data-keyword');
        showArticlePreview(keyword);
      });
    });
    
    // Delete buttons
    const deleteButtons = document.querySelectorAll('.delete-btn');
    deleteButtons.forEach(button => {
      button.addEventListener('click', function() {
        const keyword = this.getAttribute('data-keyword');
        document.getElementById('delete-keyword').textContent = keyword;
        document.getElementById('confirm-delete-btn').setAttribute('data-keyword', keyword);
        deleteModal.show();
      });
    });
    
    // Confirm delete button
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    confirmDeleteBtn.addEventListener('click', function() {
      const keyword = this.getAttribute('data-keyword');
      deleteArticle(keyword);
    });
    
    // Function to show article preview
    function showArticlePreview(keyword) {
      // Reset modal content
      document.getElementById('preview-container').style.display = 'none';
      document.getElementById('preview-error').style.display = 'none';
      document.getElementById('preview-spinner').style.display = 'block';
      
      // Show modal
      previewModal.show();
      
      // Fetch article content
      fetch(`/api/article-content?keyword=${encodeURIComponent(keyword)}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to load article content');
          }
          return response.json();
        })
        .then(data => {
          // Hide spinner
          document.getElementById('preview-spinner').style.display = 'none';
          
          if (data.success) {
            // Show content
            document.getElementById('preview-container').style.display = 'block';
            document.getElementById('preview-title').textContent = data.article.title;
            document.getElementById('preview-content').innerHTML = formatContentForPreview(data.article.content);
          } else {
            // Show error
            document.getElementById('preview-error').style.display = 'block';
            document.getElementById('error-message').textContent = data.error || 'Failed to load article content';
          }
        })
        .catch(error => {
          // Hide spinner and show error
          document.getElementById('preview-spinner').style.display = 'none';
          document.getElementById('preview-error').style.display = 'block';
          document.getElementById('error-message').textContent = error.message;
        });
    }
    
    // Function to delete article from history
    function deleteArticle(keyword) {
      fetch('/api/delete-article-history', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ keyword })
      })
        .then(response => response.json())
        .then(data => {
          deleteModal.hide();
          
          if (data.success) {
            // Show success message
            showAlert('Article deleted from history successfully', 'success');
            
            // Reload page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showAlert(`Failed to delete article: ${data.error}`, 'danger');
          }
        })
        .catch(error => {
          deleteModal.hide();
          showAlert(`Error: ${error.message}`, 'danger');
        });
    }
    
    // Function to format content for preview
    function formatContentForPreview(content) {
      // First, handle WordPress Gutenberg blocks if present
      let formattedContent = content
        .replace(/<!-- wp:heading --><h2>(.*?)<\/h2><!-- \/wp:heading -->/g, '<h2>$1</h2>')
        .replace(/<!-- wp:heading {"level":3} --><h3>(.*?)<\/h3><!-- \/wp:heading -->/g, '<h3>$1</h3>')
        .replace(/<!-- wp:paragraph --><p>(.*?)<\/p><!-- \/wp:paragraph -->/g, '<p>$1</p>')
        .replace(/<!-- wp:list --><ul>([\s\S]*?)<\/ul><!-- \/wp:list -->/g, '<ul>$1</ul>')
        .replace(/<!-- wp:list {"ordered":true} --><ol>([\s\S]*?)<\/ol><!-- \/wp:list -->/g, '<ol>$1</ol>');
      
      // If content isn't in Gutenberg format, try to format plain text with proper HTML structure
      if (!formattedContent.includes('<h2>') && !formattedContent.includes('<p>')) {
        // Process headings (assuming headings have ** around them)
        formattedContent = formattedContent.replace(/\*\*(.*?)\*\*/g, '<h2>$1</h2>');
        
        // Split by double newlines to create paragraphs
        const paragraphs = formattedContent.split(/\n\n+/);
        formattedContent = paragraphs.map(para => {
          // Skip if it's already an HTML element
          if (para.trim().startsWith('<') && para.trim().endsWith('>')) {
            return para;
          }
          
          // Skip empty paragraphs
          if (para.trim() === '') {
            return '';
          }
          
          // If it looks like a heading (not already processed)
          if (para.trim().startsWith('#')) {
            const level = para.trim().match(/^#+/)[0].length;
            if (level === 1) {
              return `<h1>${para.trim().substring(1).trim()}</h1>`;
            } else if (level === 2) {
              return `<h2>${para.trim().substring(2).trim()}</h2>`;
            } else if (level === 3) {
              return `<h3>${para.trim().substring(3).trim()}</h3>`;
            }
          }
          
          // Otherwise, make it a paragraph
          return `<p>${para}</p>`;
        }).join('\n');
      }
      
      return formattedContent;
    }
    
    // Function to show alerts
    function showAlert(message, type = 'info') {
      // Create alert container if it doesn't exist
      let alertContainer = document.querySelector('.alert-container');
      if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container position-fixed top-0 end-0 p-3';
        document.body.appendChild(alertContainer);
      }
      
      // Create alert element
      const alertEl = document.createElement('div');
      alertEl.className = `alert alert-${type} alert-dismissible fade show`;
      alertEl.role = 'alert';
      alertEl.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      
      // Add to container
      alertContainer.appendChild(alertEl);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        alertEl.classList.remove('show');
        setTimeout(() => {
          alertEl.remove();
        }, 300);
      }, 5000);
    }
  });
</script>

<%- include('partials/footer') %>
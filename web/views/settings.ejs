<%- include('partials/header', {page: 'settings'}) %>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="bi bi-gear"></i> Configuration Settings</h5>
            </div>
            <div class="card-body">
                <p class="mb-4">Configure your WordPress automation platform settings below. Changes will be saved to your .env file.</p>
                
                <form id="settings-form">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">WordPress Settings</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="wpApiUrl" class="form-label">WordPress API URL</label>
                                        <input type="text" class="form-control" id="wpApiUrl" name="wpApiUrl" value="<%= config.wordpress.apiUrl %>" required>
                                        <div class="form-text">The URL of your WordPress REST API</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="wpUsername" class="form-label">WordPress Username</label>
                                        <input type="text" class="form-control" id="wpUsername" name="wpUsername" value="<%= config.wordpress.username %>" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="wpPassword" class="form-label">WordPress Password</label>
                                        <div class="input-group">
                                            <input type="password" class="form-control" id="wpPassword" name="wpPassword" value="<%= config.wordpress.password %>" required>
                                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="wpPassword">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        <div class="form-text">Your WordPress password</div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button type="button" class="btn btn-secondary" id="test-connection-btn">
                                        <i class="bi bi-link"></i> Test WordPress Connection
                                    </button>
                                </div>
                            </div>
                            
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">OpenAI Settings</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="openaiApiKey" class="form-label">OpenAI API Key</label>
                                        <div class="input-group">
                                            <input type="password" class="form-control" id="openaiApiKey" name="openaiApiKey" value="<%= config.openai.apiKey %>" required>
                                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="openaiApiKey">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        <div class="form-text">Your OpenAI API key for content generation</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="openaiModel" class="form-label">OpenAI Model</label>
                                        <select class="form-select" id="openaiModel" name="openaiModel">
                                            <option value="gpt-4" <%= config.openai.model === 'gpt-4' ? 'selected' : '' %>>GPT-4</option>
                                            <option value="gpt-3.5-turbo" <%= config.openai.model === 'gpt-3.5-turbo' ? 'selected' : '' %>>GPT-3.5 Turbo</option>
                                            <option value="gpt-4-turbo" <%= config.openai.model === 'gpt-4-turbo' ? 'selected' : '' %>>GPT-4 Turbo</option>
                                        </select>
                                        <div class="form-text">Select the OpenAI model to use</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="openaiTemperature" class="form-label">Temperature</label>
                                        <input type="range" class="form-range" id="openaiTemperature" name="openaiTemperature" min="0.0" max="1.0" step="0.1" value="<%= config.openai.temperature %>">
                                        <div class="d-flex justify-content-between">
                                            <span>More focused (0.0)</span>
                                            <span id="temperature-value"><%= config.openai.temperature %></span>
                                            <span>More creative (1.0)</span>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="openaiMaxTokens" class="form-label">Max Tokens</label>
                                        <input type="number" class="form-control" id="openaiMaxTokens" name="openaiMaxTokens" value="<%= config.openai.maxTokens %>" min="500" max="8000">
                                        <div class="form-text">Maximum number of tokens in generated content</div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button type="button" class="btn btn-secondary" id="test-openai-btn">
                                        <i class="bi bi-robot"></i> Test OpenAI API Connection
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Application Settings</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="excelFile" class="form-label">Excel File Path</label>
                                        <input type="text" class="form-control" id="excelFile" name="excelFile" value="<%= config.app.excelFile %>">
                                        <div class="form-text">Path to your Excel file with keywords</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="keywordColumn" class="form-label">Keyword Column Name</label>
                                        <input type="text" class="form-control" id="keywordColumn" name="keywordColumn" value="<%= config.app.keywordColumn %>">
                                        <div class="form-text">Column name in Excel file containing keywords</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="minWords" class="form-label">Minimum Words</label>
                                        <input type="number" class="form-control" id="minWords" name="minWords" value="<%= config.app.minWords %>" min="200">
                                        <div class="form-text">Minimum word count for generated articles</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="publishStatus" class="form-label">Publish Status</label>
                                        <select class="form-select" id="publishStatus" name="publishStatus">
                                            <option value="draft" <%= config.app.publishStatus === 'draft' ? 'selected' : '' %>>Draft (Recommended)</option>
                                            <option value="publish" <%= config.app.publishStatus === 'publish' ? 'selected' : '' %>>Published</option>
                                        </select>
                                        <div class="form-text">How articles will be published to WordPress</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="delayBetweenPosts" class="form-label">Delay Between Posts (ms)</label>
                                        <input type="number" class="form-control" id="delayBetweenPosts" name="delayBetweenPosts" value="<%= config.app.delayBetweenPosts %>" min="1000">
                                        <div class="form-text">Delay between publishing articles (in milliseconds)</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Article Content Settings</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="contentTemplate" class="form-label">Article Template</label>
                                        <textarea class="form-control" id="contentTemplate" name="contentTemplate" rows="10"><%= config.app.contentTemplate || 'Write a comprehensive, engaging, and SEO-optimized article about "{keyword}" that follows these guidelines:\n\n1. The article should be at least {minWords} words\n2. Use proper WordPress formatting with H2 and H3 headings (no H1 as that\'s for the title)\n3. Include a compelling introduction that hooks the reader\n4. Break down the topic into logical sections with descriptive headings\n5. Include practical tips, examples, and actionable advice\n6. Add a conclusion that summarizes key points\n7. Optimize for SEO with natural keyword usage\n8. Make the content valuable and informative for the reader' %></textarea>
                                        <div class="form-text">Template for article generation. Use {keyword} and {minWords} as placeholders.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-end mt-3">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-save"></i> Save Settings
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Connection Test Modal -->
<div class="modal fade" id="connectionTestModal" tabindex="-1" aria-labelledby="connectionTestModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="connectionTestModalLabel">WordPress Connection Test</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="connection-test-spinner" class="text-center mb-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Testing...</span>
                    </div>
                    <p class="mt-2">Testing WordPress connection...</p>
                </div>
                <div id="connection-test-result" class="d-none">
                    <!-- Results will be shown here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- OpenAI Test Modal -->
<div class="modal fade" id="openaiTestModal" tabindex="-1" aria-labelledby="openaiTestModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="openaiTestModalLabel">OpenAI API Connection Test</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="openai-test-spinner" class="text-center mb-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Testing...</span>
                    </div>
                    <p class="mt-2">Testing OpenAI API connection...</p>
                </div>
                <div id="openai-test-result" class="d-none">
                    <!-- Results will be shown here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Show/hide password
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const inputField = document.getElementById(targetId);
                
                // Toggle password visibility
                if (inputField.type === 'password') {
                    inputField.type = 'text';
                    this.innerHTML = '<i class="bi bi-eye-slash"></i>';
                } else {
                    inputField.type = 'password';
                    this.innerHTML = '<i class="bi bi-eye"></i>';
                }
            });
        });
        
        // Update temperature value display
        const temperatureInput = document.getElementById('openaiTemperature');
        const temperatureValue = document.getElementById('temperature-value');
        
        temperatureInput.addEventListener('input', function() {
            temperatureValue.textContent = this.value;
        });
        
        // Test connection button
        document.getElementById('test-connection-btn').addEventListener('click', function() {
            const connectionModal = new bootstrap.Modal(document.getElementById('connectionTestModal'));
            connectionModal.show();
            
            const spinner = document.getElementById('connection-test-spinner');
            const resultDiv = document.getElementById('connection-test-result');
            
            spinner.classList.remove('d-none');
            resultDiv.classList.add('d-none');
            resultDiv.innerHTML = '';
            
            // Get current values from form
            const wpApiUrl = document.getElementById('wpApiUrl').value;
            const wpUsername = document.getElementById('wpUsername').value;
            const wpPassword = document.getElementById('wpPassword').value;
            
            // Test connection
            fetch('/api/test-connection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    apiUrl: wpApiUrl,
                    username: wpUsername,
                    password: wpPassword
                })
            })
            .then(response => response.json())
            .then(data => {
                spinner.classList.add('d-none');
                resultDiv.classList.remove('d-none');
                
                if (data.success) {
                    resultDiv.innerHTML = `
                        <div class="alert alert-success mb-0">
                            <h5><i class="bi bi-check-circle"></i> Connection Successful!</h5>
                            <p>Successfully connected to WordPress as:</p>
                            <ul>
                                <li><strong>User:</strong> ${data.user.name}</li>
                                <li><strong>ID:</strong> ${data.user.id}</li>
                                <li><strong>Roles:</strong> ${Array.isArray(data.user.roles) ? data.user.roles.join(', ') : 'N/A'}</li>
                            </ul>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger mb-0">
                            <h5><i class="bi bi-x-circle"></i> Connection Failed</h5>
                            <p>${data.error}</p>
                            <p class="mb-0"><strong>Suggestions:</strong></p>
                            <ul>
                                <li>Verify your WordPress URL is correct</li>
                                <li>Check your username and password</li>
                                <li>Ensure your user has appropriate permissions</li>
                                <li>Check that your WordPress site has REST API enabled</li>
                            </ul>
                        </div>
                    `;
                }
            })
            .catch(error => {
                spinner.classList.add('d-none');
                resultDiv.classList.remove('d-none');
                resultDiv.innerHTML = `
                    <div class="alert alert-danger mb-0">
                        <h5><i class="bi bi-x-circle"></i> Error</h5>
                        <p>An error occurred: ${error.message}</p>
                    </div>
                `;
            });
        });
        
        // Test OpenAI connection button
        document.getElementById('test-openai-btn').addEventListener('click', function() {
            const openaiModal = new bootstrap.Modal(document.getElementById('openaiTestModal'));
            openaiModal.show();
            
            const spinner = document.getElementById('openai-test-spinner');
            const resultDiv = document.getElementById('openai-test-result');
            
            spinner.classList.remove('d-none');
            resultDiv.classList.add('d-none');
            resultDiv.innerHTML = '';
            
            // Get current values from form
            const apiKey = document.getElementById('openaiApiKey').value;
            const model = document.getElementById('openaiModel').value;
            
            if (!apiKey) {
                spinner.classList.add('d-none');
                resultDiv.classList.remove('d-none');
                resultDiv.innerHTML = `
                    <div class="alert alert-warning mb-0">
                        <h5><i class="bi bi-exclamation-triangle"></i> API Key Required</h5>
                        <p>Please enter your OpenAI API key first.</p>
                    </div>
                `;
                return;
            }
            
            // Test connection
            fetch('/api/test-openai', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    apiKey: apiKey,
                    model: model
                })
            })
            .then(response => response.json())
            .then(data => {
                spinner.classList.add('d-none');
                resultDiv.classList.remove('d-none');
                
                if (data.success) {
                    resultDiv.innerHTML = `
                        <div class="alert alert-success mb-0">
                            <h5><i class="bi bi-check-circle"></i> Connection Successful!</h5>
                            <p>Successfully connected to OpenAI API.</p>
                            <ul>
                                <li><strong>Model:</strong> ${data.model}</li>
                                <li><strong>Response:</strong> ${data.response}</li>
                            </ul>
                            <p class="mb-0">Your API key is valid and working correctly.</p>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger mb-0">
                            <h5><i class="bi bi-x-circle"></i> Connection Failed</h5>
                            <p>${data.error}</p>
                            <p class="mb-0"><strong>Suggestions:</strong></p>
                            <ul>
                                <li>Verify your API key is entered correctly</li>
                                <li>Check that your OpenAI account has sufficient credits</li>
                                <li>Ensure you've set up billing in your OpenAI account</li>
                                <li>Try using a different model (like gpt-3.5-turbo)</li>
                            </ul>
                        </div>
                    `;
                }
            })
            .catch(error => {
                spinner.classList.add('d-none');
                resultDiv.classList.remove('d-none');
                resultDiv.innerHTML = `
                    <div class="alert alert-danger mb-0">
                        <h5><i class="bi bi-x-circle"></i> Error</h5>
                        <p>An error occurred: ${error.message}</p>
                    </div>
                `;
            });
        });
        
        // Form submission
        document.getElementById('settings-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Collect form data
            const formData = {
                wordpress: {
                    apiUrl: document.getElementById('wpApiUrl').value,
                    username: document.getElementById('wpUsername').value,
                    password: document.getElementById('wpPassword').value
                },
                openai: {
                    apiKey: document.getElementById('openaiApiKey').value,
                    model: document.getElementById('openaiModel').value,
                    temperature: parseFloat(document.getElementById('openaiTemperature').value),
                    maxTokens: parseInt(document.getElementById('openaiMaxTokens').value)
                },
                app: {
                    excelFile: document.getElementById('excelFile').value,
                    keywordColumn: document.getElementById('keywordColumn').value,
                    minWords: parseInt(document.getElementById('minWords').value),
                    publishStatus: document.getElementById('publishStatus').value,
                    delayBetweenPosts: parseInt(document.getElementById('delayBetweenPosts').value),
                    contentTemplate: document.getElementById('contentTemplate').value
                }
            };
            
            // Save settings
            fetch('/api/save-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Settings saved successfully!', 'success');
                } else {
                    showAlert(`Failed to save settings: ${data.error}`, 'danger');
                }
            })
            .catch(error => {
                showAlert(`Error saving settings: ${error.message}`, 'danger');
            });
        });
        
        // Function to show alerts
        function showAlert(message, type = 'info') {
            // Create alert container if it doesn't exist
            let alertContainer = document.querySelector('.alert-container');
            if (!alertContainer) {
                alertContainer = document.createElement('div');
                alertContainer.className = 'alert-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(alertContainer);
            }
            
            // Create alert element
            const alertEl = document.createElement('div');
            alertEl.className = `alert alert-${type} alert-dismissible fade show`;
            alertEl.role = 'alert';
            alertEl.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Add to container
            alertContainer.appendChild(alertEl);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alertEl.classList.remove('show');
                setTimeout(() => {
                    alertEl.remove();
                }, 300);
            }, 5000);
        }
    });
</script>

<%- include('partials/footer') %>